within GED.DistrictElectrical.CHP.BaseClasses;
block GasTurbineGeneratorEfficiency
  "Efficiency curve for gas turbine electrical generation efficiency,
   function of two input variables"

  extends Modelica.Blocks.Icons.Block;

  parameter Real a[6] "Polynomial coefficient";
  parameter Real eta_nominal "Nominal gas turbine efficiency";

  Buildings.Controls.OBC.CDL.Interfaces.RealInput loaFac(
    final unit="1") "Load factor in a range of 0 to 1"
     annotation (Placement(transformation(extent={{-140,20},{-100,60}}),
        iconTransformation(extent={{-140,20},{-100,60}})));

  Buildings.Controls.OBC.CDL.Interfaces.RealInput TAmb(
    final unit="degC",
    final quantity = "ThermodynamicTemperature")
    "Ambient temperature in degree Celsius"
     annotation (Placement(transformation(extent={{-140,-60},
            {-100,-20}}), iconTransformation(extent={{-140,-60},{-100,-20}})));

  Buildings.Controls.OBC.CDL.Interfaces.RealOutput eta(
    final unit="1") "Efficiency"
     annotation (Placement(transformation(extent={{100,-20},{140,20}}),
      iconTransformation(extent={{100,-20},{140,20}})));

protected
  Real y(unit="1") "Efficiency";
  constant Real etaSma=0.01 "Small value for eta if y is zero";
  Modelica.Units.NonSI.Temperature_degF TAmb_degF
   "Ambient temperature in degree Fahrenheit";
  Real loaPer
   "Load percentage";
algorithm
  TAmb_degF := TAmb*(9/5) +32;
  loaPer:= loaFac*100;

equation
  y =eta_nominal*Functions.MultivariatePolynomialCurve(
    a=a,
    x1=loaPer,
    x2=TAmb_degF)
    "Efficiency calculated as a function of load factor and ambient temperature";
  eta = max(y,etaSma)
  "Corrected efficiency, ensuring that efficiency is not zero";

end GasTurbineGeneratorEfficiency;
