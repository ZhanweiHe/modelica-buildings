within GED.DistrictElectrical.CHP.BaseClasses;
block ExhaustMassFlow
  "This is a correlation function of exhaust mass flow rate"
   extends Modelica.Blocks.Icons.Block;
  parameter Real a[6] "Polynominal coefficient";
  parameter Modelica.Units.SI.MassFlowRate mExh_nominal "Norminal exhaust gas mass flow rate";

  Buildings.Controls.OBC.CDL.Interfaces.RealInput loaFac(
    final unit="1") "Load factor"
    annotation (Placement(transformation(extent={{-140,20},{-100,60}}),
      iconTransformation(extent={{-140,10},{-100,50}})));
  Buildings.Controls.OBC.CDL.Interfaces.RealInput TAmb(
    final unit="degC",
    final quantity = "ThermodynamicTemperature")
     "Ambient temperature"
    annotation (Placement(transformation(extent={{-140,-60},{-100,-20}}),
      iconTransformation(extent={{-140,-70},{-100,-30}})));
  Buildings.Controls.OBC.CDL.Interfaces.RealOutput mExh(
    final unit="kg/s") "Exhaust gas mass flow rate"
    annotation (Placement(transformation(extent={{100,-20},{140,20}}),
      iconTransformation(extent={{100,-30},{140,10}})));

protected
   Modelica.Units.NonSI.Temperature_degF TAmb_degF
   "Ambient temperature in degree Fahrenheit";
   Real loaPer
   "Load percentage";

algorithm
  TAmb_degF := TAmb*(9/5) +32;
  loaPer:= loaFac*100;

equation
// Calculate exhaust gas mass flow rate for off-design conditions
// using the product of the nominal value and the correction factor.
  mExh =mExh_nominal*Functions.MultivariatePolynomialCurve(
    a=a,
    x1=loaPer,
    x2=TAmb_degF);

end ExhaustMassFlow;
